version: '3.9'
x-geolocation_service: &geolocation_service
    build:
      context: .
      dockerfile: Dockerfile
    networks:
      - default
      - redpanda_network
    depends_on:
      - redpanda-0
x-geolocation_service_environment: &geolocation_service_env
  RUST_LOG: info
  REDPANDA_BROKER: redpanda-0:9092
  HOST: localhost
  MAX_CONCURRENT_ORDERS: 10000

services:
  geolocation-0:
    <<: *geolocation_service
    ports:
      - "3000:3000"
    environment:
      <<: *geolocation_service_env
      PORT: 3000
  geolocation-1:
    <<: *geolocation_service
    ports:
      - "3001:3000"
    environment:
      <<: *geolocation_service_env
      PORT: 3001
  geolocation-2:
    <<: *geolocation_service
    ports:
      - "3002:3000"
    environment:
      <<: *geolocation_service_env
      PORT: 3002

  redpanda-0:
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      # Address the broker advertises to clients that connect to the Kafka API.
      # Use the internal addresses to connect to the Redpanda brokers'
      # from inside the same Docker network.
      # Use the external addresses to connect to the Redpanda brokers'
      # from outside the Docker network.
      - --advertise-kafka-addr internal://redpanda-0:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      # Address the broker advertises to clients that connect to the HTTP Proxy.
      - --advertise-pandaproxy-addr internal://redpanda-0:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      # Redpanda brokers use the RPC API to communicate with eachother internally.
      - --rpc-addr redpanda-0:33145
      - --advertise-rpc-addr redpanda-0:33145
      # Tells Seastar (the framework Redpanda uses under the hood) to use 1 core on the system.
      - --smp 1
      # The amount of memory to make available to Redpanda.
      - --memory 1G
      # Mode dev-container uses well-known configuration properties for development in containers.
      - --mode dev-container
      # enable logs for debugging.
      - --default-log-level=debug
    image: docker.redpanda.com/redpandadata/redpanda:v23.1.7
    container_name: redpanda-0
    volumes:
      - redpanda-0:/var/lib/redpanda/data
    networks:
      - redpanda_network
    ports:
      - "18081:18081"
      - "18082:18082"
      - "19092:19092"
      - "19644:9644"


  console:
    container_name: redpanda-console
    image: docker.redpanda.com/vectorized/console:v2.2.3
    networks:
      - redpanda_network
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda-0:9092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda-0:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda-0:9644"]
    ports:
      - "8081:8080"
    depends_on:
      - redpanda-0

networks:
  redpanda_network:
    driver: bridge
volumes:
  redpanda-0: null